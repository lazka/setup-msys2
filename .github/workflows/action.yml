name: 'action'
on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 3,6'
jobs:

  eslint:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        npm ci
        npm run lint

  cache:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
      with:
        update: true
        install: base-devel git
    - shell: msys2 {0}
      run: |
        uname -a

  powershell:
    needs: [cache]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
    - name: test MSYS
      run: |
        $env:MSYSTEM = 'MSYS'
        msys2 ./test.sh MSYS
    - name: test MINGW64
      run: |
        $env:MSYSTEM = 'MINGW64'
        msys2 ./test.sh MINGW64
    - name: test MINGW32
      run: |
        $env:MSYSTEM = 'MINGW32'
        msys2 ./test.sh MINGW32

  cmd:
    needs: [cache]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
    - name: test MSYS
      shell: cmd
      run: |
        set MSYSTEM=MSYS
        msys2 ./test.sh MSYS
    - name: test MINGW64
      shell: cmd
      run: |
        set MSYSTEM=MINGW64
        msys2 ./test.sh MINGW64
    - name: test MINGW32
      shell: cmd
      run: |
        set MSYSTEM=MINGW32
        msys2 ./test.sh MINGW32

  env:
    needs: [cache]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
    - name: test MSYS
      run: msys2 ./test.sh MSYS
      env:
        MSYSTEM: MSYS
    - name: test MINGW64
      run: msys2 ./test.sh MINGW64
      env:
        MSYSTEM: MINGW64
    - name: test MINGW32
      run: msys2 ./test.sh MINGW32
      env:
        MSYSTEM: MINGW32

  shell:
    needs: [cache]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
    - shell: msys2 {0}
      run: |
        uname -a

  msystem:
    needs: [cache]
    strategy:
      matrix:
        task: [ MSYS, MINGW64, MINGW32 ]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
      with:
        msystem: ${{ matrix.task }}
    - run: msys2 ./test.sh ${{ matrix.task }}

  update:
    needs: [cache]
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        msystem: [ MSYS, MINGW64, MINGW32 ]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
      with:
        update: true
        msystem: ${{ matrix.msystem }}
    - run: msys2 ./test.sh ${{ matrix.msystem }}

  MSYS2_PATH_TYPE:
    needs: [cache]
    runs-on: windows-latest
    steps:
    - uses: actions/setup-go@v1
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
    - run: msys2 -c "go env"
      env:
        MSYS2_PATH_TYPE: inherit

  path-type:
    needs: [cache]
    runs-on: windows-latest
    steps:
    - uses: actions/setup-go@v1
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
      with:
        path-type: inherit
    - run: msys2 -c "go env"

  install:
    needs: [cache]
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        install: [ false, git, 'base-devel git' ]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
      with:
        update: true
        install: ${{ matrix.install }}
        msystem: MINGW64
    - run: msys2 ./test.sh MINGW64

  defaultclean:
    needs: [cache]
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - run: git config --global core.autocrlf input
      shell: bash
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
      with:
        update: true
        install: base-devel git
    - run: git describe --dirty --tags

  defaultdirty:
    needs: [cache]
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
      with:
        update: true
        install: base-devel git
    - run: git describe --dirty --tags

  errorhandling:
    needs: [cache]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
    - shell: msys2 {0}
      run: |
        (! false | true) || exit 1; # make sure "-o pipefail" is active  by default
        [[ "$-" =~ 'e' ]] || exit 1; # make sure "set -e" is active by default

  workingdir:
    needs: [cache]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
    - shell: msys2 {0}
      run: |
        # make sure we are in checkout directory
        dir="$(pwd)"
        cd "$GITHUB_WORKSPACE"
        [[ "$dir" == "$(pwd)" ]]

  norelease:
    needs: [cache]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build action
      shell: bash
      run: |
        npm ci
        npm run pkg
        rm -rf node_modules
    - name: run action
      uses: ./
      with:
        release: false
        update: false
        install: ccache
    - shell: msys2 {0}
      run: |
        uname -a
